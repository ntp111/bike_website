pipeline {
    agent any

    environment {
        WORKSPACE_DIR = "${env.WORKSPACE}" 
        STAGING_ENV = 'staging' 
        PROD_ENV = 'production'
        EMAIL_RECIPIENT = 'ngtuanphong98@gmail.com'
        DOCKER_IMAGE = "bikewebsite"
        DOCKER_TAG = "1"

        AWS_REGION = 'ap-southeast-2'
        S3_BUCKET = 'bikewebsitebucket'
        CODEDEPLOY_APP_NAME = 'MyBikeWebsite'
        CODEDEPLOY_DEPLOYMENT_GROUP = 'bike_website'
        AWS_ACCESS_KEY = credentials('aws_access_key')
        AWS_SECRET_KEY = credentials('aws_secret_key')
        SONAR_TOKEN = credentials('sonar_token')
    }

    stages {
        stage('Build') {

            steps {
                echo 'Creating a temporary Docker container...'

                // Build the Docker image
                bat "docker build --no-cache -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."

                echo 'Cleaning up unused Docker images...'
                bat 'docker image prune -f'

            }
        }

        stage('Test') {
            steps {
                echo 'Running Mocha and Chai tests...'

                bat "docker run --name test_container ${DOCKER_IMAGE}:${DOCKER_TAG} npm test"
                bat "docker rm -f test_container"
            }
        }

        stage('Code Quality Analysis') {
            steps {
                echo 'Running SonarCloud analysis...'
                script {
                    def scannerHome = tool 'SonarScanner' // Use 'SonarScanner'

                    withSonarQubeEnv('SonarCloud') {  // 'SonarCloud' is the name of your SonarQube installation in Jenkins
                        bat "${scannerHome}/bin/sonar-scanner"
                    }
                }
        

            }
        }

        stage('Deploy to Staging') {
            steps {
                echo "Deploying application to ${env.STAGING_ENV} environment..."
                echo 'Deploying using Docker Compose...'
                bat 'docker-compose down'
                bat 'docker-compose up -d'             
                
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    echo "Deploying application to ${env.PROD_ENV} environment using AWS CodeDeploy..."

                }
            }
        }
    }

    post {
        always {
            emailext(
                attachLog: true,
                to: "${env.EMAIL_RECIPIENT}",
                subject: "Pipeline ${currentBuild.fullDisplayName} completed",
                body: """Pipeline ${currentBuild.fullDisplayName} completed with status ${currentBuild.currentResult}.
                Please check the attached log for more details."""
            )
        }
    }
}
