pipeline {
    agent any

    environment {
        WORKSPACE_DIR = "${env.WORKSPACE}" 
        STAGING_ENV = 'staging' 
        PROD_ENV = 'production'
        EMAIL_RECIPIENT = 'ngtuanphong98@gmail.com'
        SONAR_SCANNER_HOME = tool 'SonarScanner'

        AWS_REGION = 'ap-southeast-2'
        S3_BUCKET = 'bikewebsitebucket'
        CODEDEPLOY_APP_NAME = 'MyBikeWebsite'
        CODEDEPLOY_DEPLOYMENT_GROUP = 'bike_website'
        AWS_ACCESS_KEY = credentials('aws_access_key')
        AWS_SECRET_KEY = credentials('aws_secret_key')
        SONAR_TOKEN = credentials('sonar_token')
    }

    stages {
        stage('Build') {
            steps {
                echo 'Building the Docker image...'
                bat 'docker build -t bike_website .'

                echo 'Cleaning up old containers...'
                bat 'docker stop bike_website || true'
                bat 'docker rm bike_website || true'

                echo 'Running the Docker container to verify...'
                bat 'docker run -d --name bike_website'

                echo 'Checking if the container is running...'
                bat 'docker ps -a'
                
            }
        }

        stage('Test') {
            steps {
                echo 'Running Mocha and Chai tests...'
                bat 'npm install'
                // bat 'npm test'
                bat 'docker exec -it bike_website_container npm test'
            }
        }

        stage('Code Quality Analysis') {
            steps {
                echo 'Running SonarCloud analysis...'
                script {
                    def scannerHome = tool 'SonarScanner' // Use 'SonarScanner'

                    withSonarQubeEnv('SonarCloud') {  // 'SonarCloud' is the name of your SonarQube installation in Jenkins
                        bat "${scannerHome}/bin/sonar-scanner"
                    }
                }
        

            }
        }

        stage('Deploy to Staging') {
            steps {
                echo "Deploying application to ${env.STAGING_ENV} environment..."
                bat 'docker-compose up -d'
            }
        }

        // stage('Deploy to Production') {
        //     steps {
        //         script {
        //             // Step 1: Zip the application
        //             bat 'powershell Compress-Archive -Path .\\* -DestinationPath bike_website.zip'

        //             // Step 2: Upload the zip file to S3
        //             bat """
        //             aws configure set aws_access_key_id ${AWS_ACCESS_KEY}
        //             aws configure set aws_secret_access_key ${AWS_SECRET_KEY}
        //             aws configure set region ${AWS_REGION}
        //             aws s3 cp bike_website.zip s3://${S3_BUCKET}/bike_website.zip
        //             """

        //             // Step 3: Trigger deployment in CodeDeploy
        //             bat """
        //             aws deploy create-deployment \
        //             --application-name ${CODEDEPLOY_APP_NAME} \
        //             --deployment-group-name ${CODEDEPLOY_DEPLOYMENT_GROUP} \
        //             --s3-location bucket=${S3_BUCKET},key=bike_website.zip,bundleType=zip \
        //             --region ${AWS_REGION}
        //             """
        //         }
        //     }
        // }
    }

    post {
        always {
            emailext(
                attachLog: true,
                to: "${env.EMAIL_RECIPIENT}",
                subject: "Pipeline ${currentBuild.fullDisplayName} completed",
                body: """Pipeline ${currentBuild.fullDisplayName} completed with status ${currentBuild.currentResult}.
                Please check the attached log for more details."""
            )
        }
    }
}
